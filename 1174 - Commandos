#include<bits/stdc++.h>
using namespace std;
int main()
{
    int t;
    cin>>t;
    for(int k=1;k<=t;k++)
    {
        vector<int>edges[1000];
        queue<int>qu;
         queue<int>qu1;
        int node;
        int edge;
        cin>>node>>edge;
        int x,y;
        for(int j=0;j<edge;j++)
        {
            cin>>x>>y;
            edges[x].push_back(y);
            edges[y].push_back(x);

        }
        int s,d;
        cin>>s>>d;
        int level[node];
        int visited[node];
        int level1[node];
        int visited1[node];
        int sum1[node];
        int sum=0;
        memset(level,0,sizeof(level));
        memset(visited,0,sizeof(visited));
        memset(level1,0,sizeof(level1));
        memset(visited1,0,sizeof(visited1));
        qu.push(s);
        qu1.push(d);
        visited[s]=1;
        visited1[d]=1;

        while(!qu.empty())
        {
            int first=qu.front();
            qu.pop();
            for(int i=first,j=0;j<edges[i].size();j++)
            {
                if(visited[edges[i][j]]!=1)
                {
                    level[edges[i][j]]=level[i]+1;

                    visited[edges[i][j]]=1;
                    qu.push(edges[i][j]);
                }
            }
        }


        while(!qu1.empty())
        {
            int first=qu1.front();
            qu1.pop();
            for(int i=first,j=0;j<edges[i].size();j++)
            {
                if(visited1[edges[i][j]]!=1)
                {
                    level1[edges[i][j]]=level1[i]+1;

                    visited1[edges[i][j]]=1;
                    qu1.push(edges[i][j]);
                }
            }
        }


      for(int i=0;i<node;i++)
      {
          sum1[i]=level[i]+level1[i];
      }
      sort(sum1,sum1+node);

      cout<<"Case "<<k<<": "<<sum1[node-1]<<endl;


    }
}
